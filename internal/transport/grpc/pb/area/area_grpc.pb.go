// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: area.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AreaClient is the client API for Area service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AreaClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListArea(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AreaList, error)
	CreateArea(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*AreaFull, error)
	UpdateArea(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteArea(ctx context.Context, in *AreaId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type areaClient struct {
	cc grpc.ClientConnInterface
}

func NewAreaClient(cc grpc.ClientConnInterface) AreaClient {
	return &areaClient{cc}
}

func (c *areaClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/area.Area/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) ListArea(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AreaList, error) {
	out := new(AreaList)
	err := c.cc.Invoke(ctx, "/area.Area/ListArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) CreateArea(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*AreaFull, error) {
	out := new(AreaFull)
	err := c.cc.Invoke(ctx, "/area.Area/CreateArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) UpdateArea(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/area.Area/UpdateArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaClient) DeleteArea(ctx context.Context, in *AreaId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/area.Area/DeleteArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AreaServer is the server API for Area service.
// All implementations must embed UnimplementedAreaServer
// for forward compatibility
type AreaServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ListArea(context.Context, *emptypb.Empty) (*AreaList, error)
	CreateArea(context.Context, *CreateRequest) (*AreaFull, error)
	UpdateArea(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	DeleteArea(context.Context, *AreaId) (*emptypb.Empty, error)
	mustEmbedUnimplementedAreaServer()
}

// UnimplementedAreaServer must be embedded to have forward compatible implementations.
type UnimplementedAreaServer struct {
}

func (UnimplementedAreaServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAreaServer) ListArea(context.Context, *emptypb.Empty) (*AreaList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArea not implemented")
}
func (UnimplementedAreaServer) CreateArea(context.Context, *CreateRequest) (*AreaFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArea not implemented")
}
func (UnimplementedAreaServer) UpdateArea(context.Context, *UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArea not implemented")
}
func (UnimplementedAreaServer) DeleteArea(context.Context, *AreaId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArea not implemented")
}
func (UnimplementedAreaServer) mustEmbedUnimplementedAreaServer() {}

// UnsafeAreaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AreaServer will
// result in compilation errors.
type UnsafeAreaServer interface {
	mustEmbedUnimplementedAreaServer()
}

func RegisterAreaServer(s grpc.ServiceRegistrar, srv AreaServer) {
	s.RegisterService(&Area_ServiceDesc, srv)
}

func _Area_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/area.Area/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_ListArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).ListArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/area.Area/ListArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).ListArea(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_CreateArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).CreateArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/area.Area/CreateArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).CreateArea(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_UpdateArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).UpdateArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/area.Area/UpdateArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).UpdateArea(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Area_DeleteArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaServer).DeleteArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/area.Area/DeleteArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaServer).DeleteArea(ctx, req.(*AreaId))
	}
	return interceptor(ctx, in, info, handler)
}

// Area_ServiceDesc is the grpc.ServiceDesc for Area service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Area_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "area.Area",
	HandlerType: (*AreaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Area_Ping_Handler,
		},
		{
			MethodName: "ListArea",
			Handler:    _Area_ListArea_Handler,
		},
		{
			MethodName: "CreateArea",
			Handler:    _Area_CreateArea_Handler,
		},
		{
			MethodName: "UpdateArea",
			Handler:    _Area_UpdateArea_Handler,
		},
		{
			MethodName: "DeleteArea",
			Handler:    _Area_DeleteArea_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "area.proto",
}
